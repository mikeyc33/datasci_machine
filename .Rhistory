z <- w*(x-constant)^2
return(sum(z))
}
junk(c(0.18,-1.54,0.42,0.95),c(2,1,3,1),0.0025)
junk(c(0.18,-1.54,0.42,0.95),c(2,1,3,1),1.077)
junk(c(0.18,-1.54,0.42,0.95),c(2,1,3,1),.1471)
junk(c(0.18,-1.54,0.42,0.95),c(2,1,3,1),.3)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(mtcars$mpg~mtcars$weight)
head(mtcars)
lm(mtcars$mpg~mtcars$wt)
?sd
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
norm <- function(x){
z <- (x-mean(x))/sd(x)
return(z)
}
norm(x)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
summary(mtcars)
head(mtcars)
?mtcars
model1 <- lm(mpg ~ am)
summary(model1)
?lm
model1 <- lm(mpg ~ am, data=mtcars)
summary(model1)
model1 <- lm(mpg ~ am, data=mtcars)
summary(model1$Coefficients)
model1 <- lm(mpg ~ am, data=mtcars)
fit1 <- summary(model1)
class(fit1)
typeof(fit1)
fit1$Coefficients
fit1$coefficients
?mtcars
fit1$coefficeints
fit1$r.squared
?l
?lm
?mtcars
model2 <- lm(mpg ~ am + cyl + disp + hp, data=mtcars)
fit2 <- summary(model1)
fit2$coefficients
fit2$r.squared
model2 <- lm(mpg ~ am + cyl + disp + hp, data=mtcars)
fit2 <- summary(model2)
fit2$coefficients
fit2$r.squared
mean(mtcars[am==0,]$mpg)
mean(mtcars[mtcars$am==0,]$mpg)
mean(mtcars[mtcars$am==1,]$mpg)
model2 <- lm(mpg ~ am + cyl + disp + hp + wt, data=mtcars)
fit2 <- summary(model2)
fit2$coefficients
fit2$r.squared
fit2
fit2coefficients
model2 <- lm(mpg ~ am + cyl + disp + hp, data=mtcars)
fit2 <- summary(model2)
fit2$coefficients
fit2$r.squared
lm(mpg ~ am + cyl + disp + hp, data=mtcars)
fit2 <- summary(model2)
fit2
with(mtcars, tapply(mpg, am, mean))
anova(fit1, fit2)
anova(model1, model2)
plot <- plot(model2)
plot <- plot(model2)
plot[1]
plot <- plot(model2, which=c(1:2))
rm(list=ls())
install.packages("mass")
library(mass)
install.packages("MASS")
install.packages("MASS")
library(MASS)
# Q1
# Consider the space shuttle data ?shuttle in the MASS library. Consider modeling the use of the
# autolander as the outcome (variable name use). Fit a logistic regression model with autolander
# (variable auto) use (labeled as "auto" 1) versus not (0) as predicted by wind sign (variable wind).
# Give the estimated odds ratio for autolander use comparing head winds,
# labeled as "head" in the variable headwind (numerator) to tail winds (denominator).
library(MASS)
df1 <- load(shuttle)
df1 <- shuttle
colnames
colnames(df1)
?glm
fit1 <- glm(auto~ sign, family="binomial")
fit1 <- glm(auto ~ sign, data=df1, family="binomial")
head(df1)
fit1 <- glm(use ~ sign, data=df1, family="binomial")
summary(fit1)
fit1 <- glm(use ~ head, data=df1, family="binomial")
summary(fit1)
fit1 <- glm(use ~ head, data=df1, family="binomial")
summary(fit1)
fit1 <- glm(use ~ head, data=df1, family="binomial")
install.packages("swirl")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic. <- fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
#Here are the vectors of variations or tweaks
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
#left side of eqn is the sum of squares of residuals of the tweaked regression line
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
#right side of eqn is the sum of squares of original residuals + sum of squares of two tweaks
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
lhs - rhs
all.equal(lhs,rhs)
varchild <- var(galton$child)
varChild <- var(galton$child)
var(varRes)
varRes <- var(fit$residuals)
varEst <- ()
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
eft <- lm(accel ~ mag+dist, attenu)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(attenu$mag, efit$residuals)
cov(attenu$dist, efit$residuals)
table(InsectSprays$spray)
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <- lm(count ~ factor(spray), data=InsectSprays)
summary(fit)
summary(fit)$coef
est <- summary(fit)[,1]
fit
est <- summary(fit)$coef[,1]
mean(sA)
mean(sprayB)
mean(sB)
nfit <- lm(count ~ spray - 1)
nfit <- lm(count ~ spray - 1, data = InsectSprays)
nfit$coef
summary(nfit)$coef
spray2 <- relevel(InsectSpray$spray, "C")
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count~spray, data=spray2)
fit2 <- lm(count~spray, InsectSpray)
fit2 <- lm(count~spray, InsectsSpray)
fit2 <- lm(InsectSpray$count~spray2)
fit2 <- lm(InsectSprays$count~spray2)
summary(fit2)$coef
mean(sc)
mean(sC)
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl2)
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,'date'])
as.interger(head(hits[,'date']))
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl,'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits~date, offset=log(visits+1),poisson,data=hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fittedl.values[704])
qpois(.95, mdl2$fitted.values[704])
dat <- read.dta("http://www.ats.ucla.edu/stat/stata/dae/nb_data.dta")
dat <- within(dat, {
prog <- factor(prog, levels = 1:3, labels = c("General", "Academic", "Vocational"))
id <- factor(id)
})
require(foreign)
require(ggplot2)
require(MASS)
dat <- read.dta("http://www.ats.ucla.edu/stat/stata/dae/nb_data.dta")
dat <- within(dat, {
prog <- factor(prog, levels = 1:3, labels = c("General", "Academic", "Vocational"))
id <- factor(id)
})
head(dat)
View(dat)
library(dplyr)
str(dat)
dat <- dat %>%
mutate(daysabs=ifelse(id %in% c(1001, 1061, 1084, 2032, 2035, 2108), -5, daysabs))
View(dat)
summary(m1 <- glm.nb(daysabs ~ math + prog, data = dat))
install.packages("MySQL")
library(MySQL)
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='datasci', password='sql', dbname='database_name', host='45.55.221.155')
?dbConnect
mydb = dbConnect(MySQL(), user='datasci', password='sql', dbname='datasci', host='45.55.221.155')
dbListTables(mydb)
actions <- dbSendQuery(mydb, "select * from actions")
actions
actions <- data.frame(dbSendQuery(mydb, "select * from actions"))
actions <- fetch(dbSendQuery(mydb, "select * from actions"))
actions <- dbSendQuery(mydb, "select * from actions")
mydb = dbConnect(MySQL(), user='datasci', password='sql', dbname='datasci', host='45.55.221.155')
actions <- dbSendQuery(mydb, "select * from actions")
actions_df <- fetch(actions, n=-1)
View(actions_df)
names(action_df)
actions_df
names(actions_df)
get_actions <- dbSendQuery(mydb, "select * from actions")
get_devices <- dbSendQuery(mdb, "select * from devices")
get_products <- dbSendQuery(mdb, "select * from products_lookup")
mydb = dbConnect(MySQL(), user='datasci', password='sql', dbname='datasci', host='45.55.221.155')
get_actions <- dbSendQuery(mydb, "select * from actions")
get_devices <- dbSendQuery(mdb, "select * from devices")
get_products <- dbSendQuery(mdb, "select * from products_lookup")
datasci <- dbConnect(MySQL(), user='datasci', password='sql', dbname='datasci', host='45.55.221.155')
get_actions <- dbSendQuery(datasci, "select * from actions")
get_devices <- dbSendQuery(datasci, "select * from devices")
get_products <- dbSendQuery(datasci, "select * from products_lookup")
get_actions <- dbSendQuery(datasci, "select * from actions")
actions_df <- fetch(get_actions, n=-1)
library(RMySQL)
datasci <- dbConnect(MySQL(), user='datasci', password='sql', dbname='datasci', host='45.55.221.155')
get_actions <- dbSendQuery(datasci, "select * from actions")
actions_df <- fetch(get_actions, n=-1)
get_devices <- dbSendQuery(datasci, "select * from devices")
devices_df <- fetch(get_devices, n=-1)
get_products <- dbSendQuery(datasci, "select * from products_lookup")
products_df <- fetch(get_products, n=-1)
View(products_df)
library(RMySQL)
library(sqldf)
library(dplyr)
library(ggplot2)
options(sqldf.driver = "SQLite")
datasci <- dbConnect(MySQL(), user='datasci', password='sql', dbname='datasci', host='45.55.221.155')
get_actions <- dbSendQuery(datasci, "select * from actions")
actions_df <- fetch(get_actions, n=-1)
?rep
foo <- data.frame(group = rep(c("a","b","c"),100))
View(foo)
?rand
?runif
?rnorm
foo <- data.frame(group = rep(c("a","b","c"),100))
foo <- foo %>%
mutate(price = rnorm(mean=50))
library(dplyr)
foo <- data.frame(group = rep(c("a","b","c"),100))
foo <- foo %>%
mutate(price = rnorm(mean=50))
foo <- data.frame(group = rep(c("a","b","c"),100))
foo <- foo %>%
mutate(price = rnorm(n=300,mean=50))
foo <- data.frame(group = rep(c("a","b","c"),100))
foo <- foo %>%
mutate(price = rnorm(n=300,mean=50)) %>%
arrange(group)
View(foo)
library(sqldf)
class_a <- sqldf("select *
from foo
where group = 'a'")
View(foo)
foo <- data.frame(group = rep(c("a","b","c"),100))
foo <- foo %>%
mutate(price = rnorm(n=300,mean=50)) %>%
arrange(group)
class_a <- sqldf("select *
from foo
where group = 'a'")
options(sqldf.driver = "SQLite")
class_a <- sqldf("select *
from foo
where group = 'a'")
setwd("/Users/mikecui/Documents/coursera")
train_df1 <- read.csv("./machine_learning/data/pml-training.csv", stringsAsFactors=F)
head(train_df1)
?apply
foo <- apply(train_df1, 2, function(x) sum(is.na(x)))
foo
foo <- data.frame(apply(train_df1, 2, function(x) sum(is.na(x))))
View(foo)
names(foo)
names(NA_count) <- c("var","total_nas")
keep_vars <- subset(NA_count, total_nas < nrow(train_df1)/2)
NA_count <- data.frame(apply(train_df1, 2, function(x) sum(is.na(x))))
names(NA_count) <- c("var","total_nas")
keep_vars <- subset(NA_count, total_nas < nrow(train_df1)/2)
```{r echo=FALSE}
library(dplyr)
```
NA_count <- data.frame(apply(train_df1, 2, function(x) sum(is.na(x))))
names(NA_count) <- "total_na"
names(NA_count) <- "total_NA"
keep_vars <- subset(NA_count, total_NA < nrow(train_df1)/2)
View(keep_vars)
keep_vars
View(train_df1)
View(train_df1)
keep_vars <- subset(NA_count, total_NA < nrow(train_df1)/2)
keep_vars <- keep_vars %>%
mutate(vars = row.names) %>%
select(-c(X, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp,
new_window, num_window))
keep_vars <- subset(NA_count, total_NA < nrow(train_df1)/2)
keep_vars <- keep_vars %>%
mutate(vars = row.names)
NA_count <- data.frame(apply(train_df1, 2, function(x) sum(is.na(x))))
names(NA_count) <- "total_NA"
keep_vars <- subset(NA_count, total_NA < nrow(train_df1)/2)
keep_vars$vars <- keep_vars$row.names
View(keep_vars)
View(keep_vars)
NA_count <- lapply(train_df1, 2, function(x) sum(is.na(x))))
NA_count <- lapply(train_df1, 2, function(x) sum(is.na(x)))
NA_count <- lapply(train_df1, unction(x) sum(is.na(x)))
NA_count <- lapply(train_df1, function(x) sum(is.na(x)))
NA_count
NA_count <- sapply(train_df1, function(x) sum(is.na(x)))
?subset
NA_count <- tapply(train_df1, function(x) sum(is.na(x)))
NA_count <- sapply(train_df1, function(x) sum(is.na(x)))
NA_count[1]
NA_count <- as.character(sapply(train_df1, function(x) sum(is.na(x))))
NA_count
NA_count <- as.numeric(sapply(train_df1, function(x) sum(is.na(x))))
NA_count
NA_count < nrow(train_df1)/2
train_df2[,NA_count < nrow(train_df1)/2]
train_df2 <- train_df1[,NA_count < nrow(train_df1)/2]
View(train_df2)
names(train_df2)
NA_count <- as.numeric(sapply(train_df1, function(x) sum(is.na(x))))
train_df2 <- train_df1[,NA_count < nrow(train_df1)/2] %>%
select(-c(X, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp,
new_window, num_window))
train_df1 <- read.csv("./machine_learn/data/pml-training.csv", stringsAsFactors=F)
rm(list=ls())
train_df1 <- read.csv("./machine_learn/data/pml-training.csv", stringsAsFactors=F)
getwd()
library(caret)
install.packages("caret")
library(caret)
build_records <- createDataPartition(train_df2$classe, p=0.6, list=F)
NA_count <- as.numeric(sapply(train_df1, function(x) sum(is.na(x))))
train_df2 <- train_df1[,NA_count < nrow(train_df1)/2] %>%
select(-c(X, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp,
new_window, num_window))
build_records <- createDataPartition(train_df2$classe, p=0.6, list=F)
foo <- data(spam)
library(caret)
data(spam)
install.packages("kernlab")
library(kernlab)
foo <- data(spam)
View(spam)
preProc <- preProcess(train_df3[,-"classe"], method = "pca", pcaComp=8)
build_records <- createDataPartition(train_df2$classe, p=0.6, list=F)
train_df3 <- train_df2[build_records,]
error_df <- train_df2[-build_records,]
preProc <- preProcess(train_df3[,-"classe"], method = "pca", pcaComp=8)
preProc <- preProcess(train_df3[,-c("classe")], method = "pca", pcaComp=8)
names(train_df3)
preProc <- preProcess(train_df3[,-86], method = "pca", pcaComp=8)
str(train_df3)
str(train_df1)
train_df1 <- read.csv("./data/pml-training.csv", stringsAsFactors=F, na.strings=c("NA",""))
getwd()
setwd("/Users/mikecui/Documents/coursera/machine_learn")
train_df1 <- read.csv("./data/pml-training.csv", stringsAsFactors=F, na.strings=c("NA",""))
NA_count <- as.numeric(sapply(train_df1, function(x) sum(is.na(x))))
train_df2 <- train_df1[,NA_count < nrow(train_df1)/2] %>%
select(-c(X, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp,
new_window, num_window))
View(train_df2)
build_records <- createDataPartition(train_df2$classe, p=0.6, list=F)
train_df3 <- train_df2[build_records,]
error_df <- train_df2[-build_records,]
preProc <- preProcess(train_df3[,-53], method = "pca", pcaComp=8)
preProc <- preProcess(subset(train_df3, select=-classe), method = "pca", pcaComp=8)
modelFit <- train(train_df3$classe ~ ., method="glm", preProcess = "pca", data=train_df3)
install.packages("e1071")
modelFit <- train(train_df3$classe ~ ., method="glm", preProcess = "pca", data=train_df3)
preProc <- preProcess(subset(train_df3, select=-classe), method="pca", pcaComp=2)
trainPC <- predict(preProc, subset(train_df3, select=-classe))
modelFit <- train(train_df3$classe ~ ., method="glm", data=trainPC)
preProc <- preProcess(subset(train_df3, select=-classe), method="pca", pcaComp=10)
trainPC <- predict(preProc, subset(train_df3, select=-classe))
modelFit <- train(train_df3$classe ~ ., method="glm", data=trainPC)
View(train_df3)
str(train_df3)
table(train_df3$classe)
preProc <- preProcess(train_df3[,-53], method="pca", pcaComp=10)
trainPC <- predict(preProc, train_df3[,-53])
modelFit <- train(train_df3$classe ~ ., method="glm", data=trainPC)
modelFit <- train(train_df3$classe ~ ., method="gbm", data=trainPC)
preProc <- preProcess(train_df3[,-53], method="pca", pcaComp=3)
trainPC <- predict(preProc, train_df3[,-53])
modelFit <- train(train_df3$classe ~ ., method="glm", data=trainPC)
warnings()
?train
preProc <- preProcess(log10(train_df3[,-53]+1), method="pca", pcaComp=3)
trainPC <- predict(preProc, log10(train_df3[,-53]+1))
preProc <- preProcess(log10(spam[,-58]+1),method='pca',pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
inTrain - createDataPartition(y=sampl$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(spam[,-58]+1),method='pca',pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
inTrain - createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(spam[,-58]+1),method='pca',pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
training <- spam[inTrain,]
inTrain - createDataPartition(y=spam$type, p=0.75, list=FALSE)
inTrain - createDataPartition(y=spam$type, p=0.75, list=FALSE)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(spam[,-58]+1),method='pca',pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
modelFit
preProc <- preProcess(log10(spam[,-58]+1),method='pca',pcaComp=2)
trainPC <- predict(preProc, log10(spam[,-58]+1))
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),method='pca',pcaComp=2)
trainPC <- predict(preProc, log10(training[,-58]+1))
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
warnings()
modelFit
build_records <- createDataPartition(y=train_df2$classe, p=0.6, list=F)
train_df3 <- train_df2[build_records,]
error_df <- train_df2[-build_records,]
build_records <- createDataPartition(y=train_df2$classe, p=0.6, list=F)
train_df3 <- train_df2[build_records,]
error_df <- train_df2[-build_records,]
preProc <- preProcess(log10(train_df3[,-53]+1), method="pca", pcaComp=8)
trainPC <- predict(preProc, log10(train_df3[,-53]+1))
modelFit <- train(train_df3$classe ~ ., method="glm", data=trainPC)
View(spam)
preProc <- preProcess(train_df3[,-53], method="pca", pcaComp=8)
trainPC <- predict(preProc, train_df3[,-53])
modelFit <- train(train_df3$classe ~ ., method="glm", data=trainPC)
head(train_df3)
str(train_df3)
apply(train_df3, 2, summary)
?summary
apply(train_df3, 2, mean)
warnings()
names(train_df3)
mean(train_df3[,41])
mean(train_df3[,4])
trainPC
preProc <- preProcess(train_df3[,-53], method="pca", pcaComp=2)
trainPC <- predict(preProc, train_df3[,-53])
modelFit <- train(train_df3$classe ~ ., method="glm", data=trainPC)
str(training)
build_records <- createDataPartition(y=train_df2$classe, p=0.6, list=F)
train_df3 <- train_df2[build_records,]
error_df <- train_df2[-build_records,]
#convert all variables besides "classe" to numeric format
train_df3[,-53] <- sapply(train_df3[,-53], as.nuermic)
error_df[,-53] <- sapply(error_df[,-53], as.nuermic)
#convert all variables besides "classe" to numeric format
train_df3[,-53] <- sapply(train_df3[,-53], as.numeric)
error_df[,-53] <- sapply(error_df[,-53], as.numeric)
preProc <- preProcess(train_df3[,-53], method="pca", pcaComp=2)
trainPC <- predict(preProc, train_df3[,-53])
modelFit <- train(train_df3$classe ~ ., method="glm", data=trainPC)
